From 734fd152b1c53ac9bfe059a13243a4025841de4e Mon Sep 17 00:00:00 2001
From: sefa <sefa@mayflower.work>
Date: Fri, 15 Aug 2025 00:17:09 +0300
Subject: [PATCH] feat: add pico-8 player-mobile

---
 public/picoplayer.js           |  44 +++++-
 src/app/globals.css            |  35 +++++
 src/app/layout.tsx             |   2 +-
 src/app/page.tsx               |   2 +-
 src/components/Pico8Player.tsx | 270 ++++++++++++++++++++++++++-------
 src/contexts/ThemeContext.tsx  |  26 +++-
 6 files changed, 317 insertions(+), 62 deletions(-)

diff --git a/public/picoplayer.js b/public/picoplayer.js
index f2a5f25..d8e9249 100644
--- a/public/picoplayer.js
+++ b/public/picoplayer.js
@@ -23,8 +23,8 @@ function PicoPlayer(element, cart, lib, width, height) {
   }
 
   // Default sizes if not provided
-  width = 128;
-  height = 128;
+  if (!width) width = 512;
+  if (!height) height = 512;
 
   // load element by ID
   if (typeof(element) == 'string') {
@@ -37,11 +37,25 @@ function PicoPlayer(element, cart, lib, width, height) {
   // Set canvas size explicitly
   canvas.width = 128;  // Keep native PICO-8 resolution
   canvas.height = 128;
-  canvas.style.width = width + 'px';
-  canvas.style.height = height + 'px';
+  canvas.style.width = '100%';
+  canvas.style.height = '100%';
+  canvas.style.maxWidth = width + 'px';
+  canvas.style.maxHeight = height + 'px';
   canvas.style.imageRendering = 'pixelated';
   canvas.style.imageRendering = '-moz-crisp-edges';
   canvas.style.imageRendering = 'crisp-edges';
+  canvas.style.display = 'block';
+  canvas.style.margin = '0 auto';
+  
+  // Clear element content and set proper styling
+  element.innerHTML = '';
+  element.style.width = '100%';
+  element.style.height = '100%';
+  element.style.maxWidth = width + 'px';
+  element.style.maxHeight = height + 'px';
+  element.style.display = 'flex';
+  element.style.alignItems = 'center';
+  element.style.justifyContent = 'center';
   
   element.appendChild(canvas);
 
@@ -55,6 +69,28 @@ function PicoPlayer(element, cart, lib, width, height) {
   var head = document.getElementsByTagName('head')[0];
   var js = document.createElement('script');
   js.src = lib;
+  
+  // Apply scaling after PICO-8 loads and creates its canvas
+  js.onload = function() {
+    setTimeout(function() {
+      var actualCanvas = element.querySelector('canvas');
+      if (actualCanvas) {
+        actualCanvas.style.width = '100%';
+        actualCanvas.style.height = '100%';
+        actualCanvas.style.maxWidth = width + 'px';
+        actualCanvas.style.maxHeight = height + 'px';
+        actualCanvas.style.imageRendering = 'pixelated';
+        actualCanvas.style.imageRendering = '-moz-crisp-edges';
+        actualCanvas.style.imageRendering = 'crisp-edges';
+        actualCanvas.style.display = 'block';
+        actualCanvas.style.margin = '0 auto';
+        
+        // Force reflow
+        actualCanvas.offsetWidth;
+      }
+    }, 500); // Give PICO-8 time to initialize
+  };
+  
   head.appendChild(js);
 }
 
diff --git a/src/app/globals.css b/src/app/globals.css
index 004da8d..9863c00 100644
--- a/src/app/globals.css
+++ b/src/app/globals.css
@@ -36,3 +36,38 @@ body {
     linear-gradient(90deg, rgba(0, 255, 127, 0.12) 1px, transparent 1px);
   background-size: 30px 30px;
 }
+
+/* Force PICO-8 canvas scaling - responsive */
+.pico8-player canvas {
+  width: 100% !important;
+  height: 100% !important;
+  max-width: 512px !important;
+  max-height: 512px !important;
+  image-rendering: pixelated !important;
+  image-rendering: -moz-crisp-edges !important;
+  image-rendering: crisp-edges !important;
+  display: block !important;
+  margin: 0 auto !important;
+  object-fit: fill !important;
+  background-color: black !important;
+}
+
+/* Touch control styles */
+.pico8-player button {
+  user-select: none;
+  -webkit-user-select: none;
+  -moz-user-select: none;
+  -ms-user-select: none;
+  touch-action: manipulation;
+  -webkit-tap-highlight-color: transparent;
+}
+
+/* Prevent text selection on touch controls */
+.pico8-player .select-none {
+  -webkit-touch-callout: none;
+  -webkit-user-select: none;
+  -khtml-user-select: none;
+  -moz-user-select: none;
+  -ms-user-select: none;
+  user-select: none;
+}
diff --git a/src/app/layout.tsx b/src/app/layout.tsx
index 71e4ab0..113e8c6 100644
--- a/src/app/layout.tsx
+++ b/src/app/layout.tsx
@@ -43,7 +43,7 @@ export default function RootLayout({
   children: React.ReactNode;
 }>) {
   return (
-    <html lang="en">
+    <html lang="en" className="dark">
       <body
         className={`${inter.variable} ${robotoMono.variable} ${pixelFont.variable} ${poppins.variable} antialiased`}
       >
diff --git a/src/app/page.tsx b/src/app/page.tsx
index 698cd6c..9079988 100644
--- a/src/app/page.tsx
+++ b/src/app/page.tsx
@@ -60,7 +60,7 @@ export default function Home() {
       <section className="mt-12 md:mt-16">
         <h2 className="text-2xl md:text-3xl font-bold text-center mb-6 md:mb-8 font-poppins">PICO-8 Games</h2>
         <div className="flex justify-center px-4">
-          <div className="w-full max-w-2xl">
+          <div className="w-full max-w-lg mx-auto">
             <Pico8Player width={512} height={512} />
           </div>
         </div>
diff --git a/src/components/Pico8Player.tsx b/src/components/Pico8Player.tsx
index 9af2eb9..93fa046 100644
--- a/src/components/Pico8Player.tsx
+++ b/src/components/Pico8Player.tsx
@@ -1,6 +1,6 @@
 'use client';
 
-import { useEffect, useRef, useState } from 'react';
+import { useEffect, useRef, useState, useCallback } from 'react';
 
 interface Pico8PlayerProps {
   width?: number;
@@ -10,6 +10,8 @@ interface Pico8PlayerProps {
 declare global {
   interface Window {
     PicoPlayer: (containerId: string, cartPath: string, lib?: string, width?: number, height?: number) => void;
+    PicoPress: (key: number, player: number) => void;
+    PicoRelease: (key: number, player: number) => void;
   }
 }
 
@@ -21,6 +23,18 @@ export default function Pico8Player({
   const [selectedGame, setSelectedGame] = useState<string>('');
   const [isLoaded, setIsLoaded] = useState(false);
   const [error, setError] = useState<string | null>(null);
+  const [showMobileControls, setShowMobileControls] = useState(false);
+
+  // Detect mobile device
+  useEffect(() => {
+    const checkMobile = () => {
+      setShowMobileControls(window.innerWidth < 768 || 'ontouchstart' in window);
+    };
+    
+    checkMobile();
+    window.addEventListener('resize', checkMobile);
+    return () => window.removeEventListener('resize', checkMobile);
+  }, []);
 
   const availableGames = [
     '/pico-8/demo_game.p8.png',
@@ -32,52 +46,68 @@ export default function Pico8Player({
     '/pico-8/traficgame-0.p8.png'
   ];
 
-  useEffect(() => {
-    if (availableGames.length > 0 && !selectedGame) {
-      setSelectedGame(availableGames[0]);
-    }
-    loadPicoPlayerScript();
-  }, []);
-
-  const loadPicoPlayerScript = () => {
-    if (typeof window !== 'undefined' && !window.PicoPlayer) {
-      const script = document.createElement('script');
-      script.src = '/picoplayer.js';
-      script.onload = () => {
-        if (selectedGame) {
-          loadGame(selectedGame);
-        }
-      };
-      script.onerror = () => {
-        setError('Failed to load PicoPlayer library');
-      };
-      document.head.appendChild(script);
-    } else if (typeof window.PicoPlayer === 'function' && selectedGame) {
-      loadGame(selectedGame);
-    }
-  };
-
-  const loadGame = (gamePath: string) => {
-    
-    if (!containerRef.current || !window.PicoPlayer) 
-      
+  const loadGame = useCallback((gamePath: string) => {
+    if (!containerRef.current || !window.PicoPlayer) {
       return;
+    }
 
     setIsLoaded(false);
     setError(null);
 
     try {
-      if (containerRef.current) {
-        containerRef.current.innerHTML = '';
+      if (!containerRef.current) {
+        setError('Container not ready');
+        return;
       }
 
+      containerRef.current.innerHTML = '';
       const containerId = 'pico-container-' + Date.now();
       containerRef.current.id = containerId;
 
       setTimeout(() => {
         try {
           window.PicoPlayer(containerId, gamePath, undefined, width, height);
-          setIsLoaded(true);
+          
+          // Additional canvas scaling enforcement with monitoring
+          const forceCanvasScaling = () => {
+            if (!containerRef.current) return;
+            const canvas = containerRef.current.querySelector('canvas');
+            if (canvas) {
+              // Make canvas responsive
+              canvas.style.width = '100%';
+              canvas.style.height = '100%';
+              canvas.style.maxWidth = `${width}px`;
+              canvas.style.maxHeight = `${height}px`;
+              canvas.style.imageRendering = 'pixelated';
+              canvas.style.display = 'block';
+              canvas.style.margin = '0 auto';
+              canvas.style.objectFit = 'fill';
+              canvas.style.backgroundColor = 'black';
+              canvas.style.transform = 'scale(1)';
+              
+              // Also set HTML attributes for extra enforcement
+              canvas.setAttribute('width', '128');
+              canvas.setAttribute('height', '128');
+              canvas.setAttribute('style', `width: 100% !important; height: 100% !important; max-width: ${width}px !important; max-height: ${height}px !important; image-rendering: pixelated; display: block; margin: 0 auto; object-fit: fill; background-color: black;`);
+              
+              // Force browser reflow
+              void canvas.offsetWidth;
+            }
+          };
+          
+          // Apply scaling multiple times to ensure it sticks
+          setTimeout(forceCanvasScaling, 500);
+          setTimeout(forceCanvasScaling, 1000);
+          setTimeout(forceCanvasScaling, 2000);
+          
+          // Set up periodic checking
+          const scalingInterval = setInterval(forceCanvasScaling, 1000);
+          setTimeout(() => clearInterval(scalingInterval), 10000); // Stop after 10 seconds
+          
+          // Wait a bit more before marking as loaded to ensure PICO-8 is fully ready
+          setTimeout(() => {
+            setIsLoaded(true);
+          }, 3000);
         } catch (err) {
           setError('Failed to load game: ' + (err instanceof Error ? err.message : 'Unknown error'));
         }
@@ -86,18 +116,90 @@ export default function Pico8Player({
     } catch (err) {
       setError('Failed to load game: ' + (err instanceof Error ? err.message : 'Unknown error'));
     }
-  };
+  }, [width, height]);
+
+  const loadPicoPlayerScript = useCallback(() => {
+    if (typeof window !== 'undefined' && !window.PicoPlayer) {
+      const script = document.createElement('script');
+      script.src = '/picoplayer.js';
+      script.onload = () => {
+        if (selectedGame) {
+          loadGame(selectedGame);
+        }
+      };
+      script.onerror = () => {
+        setError('Failed to load PicoPlayer library');
+      };
+      document.head.appendChild(script);
+    } else if (typeof window.PicoPlayer === 'function' && selectedGame) {
+      loadGame(selectedGame);
+    }
+  }, [selectedGame, loadGame]);
+
+  useEffect(() => {
+    if (availableGames.length > 0 && !selectedGame) {
+      setSelectedGame(availableGames[0]);
+    }
+    loadPicoPlayerScript();
+    // eslint-disable-next-line react-hooks/exhaustive-deps
+  }, [selectedGame, loadPicoPlayerScript]);
 
   useEffect(() => {
-    if (selectedGame && typeof window.PicoPlayer === 'function') {
+    if (selectedGame && typeof window !== 'undefined' && typeof window.PicoPlayer === 'function') {
       loadGame(selectedGame);
     }
-  }, [selectedGame]);
+  }, [selectedGame, loadGame]);
 
   const handleGameSelect = (game: string) => {
     setSelectedGame(game);
   };
 
+  // Touch control handlers
+  const handleButtonPress = (button: number) => {
+    if (typeof window !== 'undefined' && window.PicoPress && isLoaded) {
+      try {
+        window.PicoPress(button, 0); // Player 0
+      } catch (err) {
+        console.warn('PICO-8 not ready for input:', err);
+      }
+    }
+  };
+
+  const handleButtonRelease = (button: number) => {
+    if (typeof window !== 'undefined' && window.PicoRelease && isLoaded) {
+      try {
+        window.PicoRelease(button, 0); // Player 0
+      } catch (err) {
+        console.warn('PICO-8 not ready for input:', err);
+      }
+    }
+  };
+
+  const handleTouchButton = (button: number) => {
+    return {
+      onTouchStart: (e: React.TouchEvent) => {
+        e.preventDefault();
+        handleButtonPress(button);
+      },
+      onTouchEnd: (e: React.TouchEvent) => {
+        e.preventDefault();
+        handleButtonRelease(button);
+      },
+      onMouseDown: (e: React.MouseEvent) => {
+        e.preventDefault();
+        handleButtonPress(button);
+      },
+      onMouseUp: (e: React.MouseEvent) => {
+        e.preventDefault();
+        handleButtonRelease(button);
+      },
+      onMouseLeave: (e: React.MouseEvent) => {
+        e.preventDefault();
+        handleButtonRelease(button);
+      }
+    };
+  };
+
   return (
     <div className="pico8-player bg-black p-4 rounded-lg">
       <div className="mb-4">
@@ -128,32 +230,94 @@ export default function Pico8Player({
         
         <div
           ref={containerRef}
-          className="border border-gray-600 rounded mx-auto"
+          className="border border-gray-600 rounded mx-auto bg-black w-full max-w-full aspect-square"
           style={{ 
-            width: `${width}px`, 
-            height: `${height}px`,
-            maxWidth: '100%',
-            imageRendering: 'pixelated'
+            maxWidth: `${width}px`, 
+            maxHeight: `${height}px`,
+            imageRendering: 'pixelated',
+            display: 'flex',
+            alignItems: 'center',
+            justifyContent: 'center'
           }}
         />
         
-        <style jsx>{`
-          #${containerRef.current?.id} canvas {
-            width: ${width}px !important;
-            height: ${height}px !important;
-            image-rendering: pixelated;
-            image-rendering: -moz-crisp-edges;
-            image-rendering: crisp-edges;
-            object-fit: contain;
-          }
-        `}</style>
-        
-        {isLoaded && (
+        {isLoaded && !showMobileControls && (
           <div className="mt-4 text-xs text-gray-400">
             <p>Controls: Arrow keys to move, Z/X for buttons</p>
           </div>
         )}
+
+        {/* Mobile Touch Controls */}
+        {showMobileControls && isLoaded && (
+          <div className="mt-6">
+            <div className="flex justify-between items-center max-w-sm mx-auto">
+              {/* D-Pad */}
+              <div className="relative">
+                <div className="grid grid-cols-3 gap-1 w-36 h-36">
+                  <div></div>
+                  <button
+                    className="bg-gradient-to-b from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 active:from-gray-800 active:to-gray-900 text-white font-bold rounded-lg select-none shadow-lg border-2 border-gray-500 flex items-center justify-center text-xl"
+                    {...handleTouchButton(2)} // Up
+                  >
+                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
+                      <path d="M12 4l-8 8h6v8h4v-8h6z"/>
+                    </svg>
+                  </button>
+                  <div></div>
+                  <button
+                    className="bg-gradient-to-b from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 active:from-gray-800 active:to-gray-900 text-white font-bold rounded-lg select-none shadow-lg border-2 border-gray-500 flex items-center justify-center text-xl"
+                    {...handleTouchButton(0)} // Left
+                  >
+                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
+                      <path d="M4 12l8-8v6h8v4h-8v6z"/>
+                    </svg>
+                  </button>
+                  <div className="bg-gray-800 rounded-lg border-2 border-gray-600"></div>
+                  <button
+                    className="bg-gradient-to-b from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 active:from-gray-800 active:to-gray-900 text-white font-bold rounded-lg select-none shadow-lg border-2 border-gray-500 flex items-center justify-center text-xl"
+                    {...handleTouchButton(1)} // Right
+                  >
+                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
+                      <path d="M20 12l-8 8v-6H4v-4h8V4z"/>
+                    </svg>
+                  </button>
+                  <div></div>
+                  <button
+                    className="bg-gradient-to-b from-gray-600 to-gray-700 hover:from-gray-500 hover:to-gray-600 active:from-gray-800 active:to-gray-900 text-white font-bold rounded-lg select-none shadow-lg border-2 border-gray-500 flex items-center justify-center text-xl"
+                    {...handleTouchButton(3)} // Down
+                  >
+                    <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
+                      <path d="M12 20l8-8h-6V4h-4v8H4z"/>
+                    </svg>
+                  </button>
+                  <div></div>
+                </div>
+              </div>
+
+              {/* Action Buttons */}
+              <div className="flex flex-col gap-4">
+                <button
+                  className="bg-gradient-to-b from-blue-500 to-blue-600 hover:from-blue-400 hover:to-blue-500 active:from-blue-700 active:to-blue-800 text-white font-bold w-16 h-16 rounded-full select-none text-xl shadow-lg border-3 border-blue-400 flex items-center justify-center"
+                  {...handleTouchButton(5)} // X button
+                >
+                  <span className="font-mono font-black text-2xl">X</span>
+                </button>
+                <button
+                  className="bg-gradient-to-b from-red-500 to-red-600 hover:from-red-400 hover:to-red-500 active:from-red-700 active:to-red-800 text-white font-bold w-16 h-16 rounded-full select-none text-xl shadow-lg border-3 border-red-400 flex items-center justify-center"
+                  {...handleTouchButton(4)} // Z button
+                >
+                  <span className="font-mono font-black text-2xl">Z</span>
+                </button>
+              </div>
+            </div>
+
+            <div className="mt-4 text-xs text-gray-400 text-center">
+              <p>D-Pad: Move • Z: Action/Jump • X: Secondary Action</p>
+              <p>Tap and hold for continuous input</p>
+            </div>
+          </div>
+        )}
       </div>
     </div>
   );
diff --git a/src/contexts/ThemeContext.tsx b/src/contexts/ThemeContext.tsx
index 1c516e0..0f49313 100644
--- a/src/contexts/ThemeContext.tsx
+++ b/src/contexts/ThemeContext.tsx
@@ -13,13 +13,25 @@ const ThemeContext = createContext<ThemeContextType | undefined>(undefined);
 
 export function ThemeProvider({ children }: { children: React.ReactNode }) {
   const [theme, setTheme] = useState<Theme>('dark');
+  const [mounted, setMounted] = useState(false);
 
   useEffect(() => {
+    setMounted(true);
     const savedTheme = localStorage.getItem('theme') as Theme;
     const initialTheme = savedTheme || 'dark';
-    setTheme(initialTheme);
-    document.documentElement.classList.toggle('dark', initialTheme === 'dark');
-  }, []);
+    
+    // Only update if different from current state to avoid unnecessary changes
+    if (initialTheme !== theme) {
+      setTheme(initialTheme);
+    }
+    
+    // Ensure the class matches the theme
+    if (initialTheme === 'dark') {
+      document.documentElement.classList.add('dark');
+    } else {
+      document.documentElement.classList.remove('dark');
+    }
+  }, [theme]);
 
   const toggleTheme = () => {
     const newTheme = theme === 'light' ? 'dark' : 'light';
@@ -28,6 +40,14 @@ export function ThemeProvider({ children }: { children: React.ReactNode }) {
     document.documentElement.classList.toggle('dark', newTheme === 'dark');
   };
 
+  if (!mounted) {
+    return (
+      <ThemeContext.Provider value={{ theme, toggleTheme }}>
+        {children}
+      </ThemeContext.Provider>
+    );
+  }
+
   return (
     <ThemeContext.Provider value={{ theme, toggleTheme }}>
       {children}
-- 
2.49.0

